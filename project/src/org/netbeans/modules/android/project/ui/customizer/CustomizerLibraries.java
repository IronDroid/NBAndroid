/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.netbeans.modules.android.project.ui.customizer;

import com.google.common.collect.Lists;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectManager;
import org.netbeans.modules.android.project.AndroidGeneralData;
import org.netbeans.modules.android.project.AndroidProject;
import org.netbeans.spi.project.support.ant.PropertyUtils;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.filesystems.FileUtil;

/** 
 * Customizer for Android libraries.
 */
public class CustomizerLibraries extends JPanel {
  private static final Logger LOG = Logger.getLogger(CustomizerLibraries.class.getName());

  private final AndroidGeneralData data;
  private final AndroidProject project;
  private final DefaultTableModel libsTableModel;

  public CustomizerLibraries(AndroidGeneralData data, AndroidProject project) {
    this.data = data;
    this.project = project;
    String[] referencedProjects = 
        Lists.newArrayList(data.getReferencedProjects()).toArray(new String[0]);
    Object[][] referencedProjectsData = new Object[referencedProjects.length][];
    for (int i = 0; i < referencedProjects.length; i++) {
      referencedProjectsData[i] = new Object[] { 
          new File(project.getProjectDirectoryFile(), referencedProjects[i]).getName(), 
          referencedProjects[i]};
    }
    libsTableModel = new javax.swing.table.DefaultTableModel(
        referencedProjectsData,
        new String [] {"Name", "Directory"}) {
      Class[] types = new Class [] {
        java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean [] {
        false, false
      };

      @Override
      public Class getColumnClass(int columnIndex) {
        return types[columnIndex];
      }

      @Override
      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit[columnIndex];
      }
    };
    initComponents(); 
    initFromProject(project);
    jTableLibs.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

      @Override
      public void valueChanged(ListSelectionEvent e) {
        updateData();
      }
    });
  }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jCheckBoxIsLib = new javax.swing.JCheckBox();
    jSeparator1 = new javax.swing.JSeparator();
    jLabelReferrencedProjects = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    jTableLibs = new javax.swing.JTable();
    jButtonAddPrj = new javax.swing.JButton();
    jButtonRemovePrj = new javax.swing.JButton();

    org.openide.awt.Mnemonics.setLocalizedText(jCheckBoxIsLib, "Is library");
    jCheckBoxIsLib.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxIsLibActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(jLabelReferrencedProjects, "Referenced library projects:");

    jTableLibs.setModel(libsTableModel);
    jTableLibs.setColumnSelectionAllowed(true);
    jTableLibs.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jScrollPane1.setViewportView(jTableLibs);
    jTableLibs.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

    org.openide.awt.Mnemonics.setLocalizedText(jButtonAddPrj, "Add");
    jButtonAddPrj.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonAddPrjActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(jButtonRemovePrj, "Remove");
    jButtonRemovePrj.setEnabled(false);
    jButtonRemovePrj.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonRemovePrjActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
          .addComponent(jCheckBoxIsLib)
          .addComponent(jLabelReferrencedProjects)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(jButtonAddPrj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jButtonRemovePrj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jCheckBoxIsLib)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabelReferrencedProjects)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jButtonAddPrj)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButtonRemovePrj))
          .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void jCheckBoxIsLibActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxIsLibActionPerformed
    updateData();
  }//GEN-LAST:event_jCheckBoxIsLibActionPerformed

  private void jButtonRemovePrjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemovePrjActionPerformed
    int row = jTableLibs.getSelectedRow();
    if (row == -1) {
      // weird
      return;
    }
    libsTableModel.removeRow(row);
    updateData();
  }//GEN-LAST:event_jButtonRemovePrjActionPerformed

  private void jButtonAddPrjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPrjActionPerformed
    JFileChooser chooser = ProjectChooser.projectChooser();
    chooser.setDialogTitle("Select Android Library Project");
    int option = chooser.showOpenDialog(null);

    if (option == JFileChooser.APPROVE_OPTION) {
      File prjDir = chooser.getSelectedFile();
      try {
        Project p = ProjectManager.getDefault().findProject(
            FileUtil.toFileObject(FileUtil.normalizeFile(prjDir)));
        if (p == null) {
          return;
        }
        AndroidProject ap = p.getLookup().lookup(AndroidProject.class);
        if (ap == null) {
          NotifyDescriptor d = new NotifyDescriptor.Message(
              "Only Android Library project can be added as dependency", 
              NotifyDescriptor.WARNING_MESSAGE);
          DialogDisplayer.getDefault().notify(d);
          return;
        }
        if (ap.info().isLibrary()) {
          String relativePath = 
              PropertyUtils.relativizeFile(project.getProjectDirectoryFile(), prjDir);
          if (relativePath != null) {
            // TODO check if it is already there
            libsTableModel.addRow(new Object[] {prjDir.getName(), relativePath});
            updateData();
          } else {
            NotifyDescriptor d = new NotifyDescriptor.Message(
                "Cannot find relative path to " + prjDir.getAbsolutePath(), 
                NotifyDescriptor.WARNING_MESSAGE);
            DialogDisplayer.getDefault().notify(d);
          }
          return;
        }
      } catch (IOException ex) {
        LOG.log(Level.WARNING, null, ex);
      } catch (IllegalArgumentException ex) {
        LOG.log(Level.WARNING, null, ex);
      }
      NotifyDescriptor d = new NotifyDescriptor.Message(
          "You have to select Android Library Project.", 
          NotifyDescriptor.WARNING_MESSAGE);
      DialogDisplayer.getDefault().notify(d);
    }
  }//GEN-LAST:event_jButtonAddPrjActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButtonAddPrj;
  private javax.swing.JButton jButtonRemovePrj;
  private javax.swing.JCheckBox jCheckBoxIsLib;
  private javax.swing.JLabel jLabelReferrencedProjects;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JSeparator jSeparator1;
  private javax.swing.JTable jTableLibs;
  // End of variables declaration//GEN-END:variables

  private void initFromProject(AndroidProject project) {
    jCheckBoxIsLib.setSelected(project.info().isLibrary());
//    for (File lib : project.info().getDependentProjectDirs()) {
//      FileObject libFo = FileUtil.toFileObject(FileUtil.normalizeFile(lib));
//      Project libPrj = null;
//      try {
//        libPrj = libFo != null ? ProjectManager.getDefault().findProject(libFo) : null;
//      } catch (IOException ex) {
//        LOG.log(Level.INFO, null, ex);
//      } catch (IllegalArgumentException ex) {
//        LOG.log(Level.INFO, null, ex);
//      }
//      String name = libPrj != null ? 
//          libPrj.getLookup().lookup(ProjectInformation.class).getDisplayName() : 
//          lib.getName();
//      String path = lib.getPath();
//      libsTableModel.addRow(new Object[] {name, path});
//    }
  }

  private void updateData() {
    data.setLibrary(jCheckBoxIsLib.isSelected());
    List<String> projects = Lists.newArrayList();
    for (int i = 0; i < libsTableModel.getRowCount(); i++) {
      projects.add((String) libsTableModel.getValueAt(i, 1));
    }
    data.setReferencedProjects(projects);
    jButtonRemovePrj.setEnabled(jTableLibs.getSelectedRowCount() == 1);
  }
}
