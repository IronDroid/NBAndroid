/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.netbeans.modules.android.project.ui.wizards;

import com.google.common.base.Preconditions;
import com.google.common.base.Strings;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.android.project.ui.customizer.AndroidProjectProperties;
import org.openide.WizardDescriptor;

public final class ExportPackageCreateKeyVisualPanel extends SettingsPanel {
  private final static Logger LOG = 
      Logger.getLogger(ExportPackageCreateKeyVisualPanel.class.getName());

  private String errorMsg = null;
  private boolean valid = true;
  private String dName;
  private final ExportPackageCreateKeyWizardPanel wizPanel;

  /** Creates new form ExportPackageVisualPanel2 */
  public ExportPackageCreateKeyVisualPanel(ExportPackageCreateKeyWizardPanel wizPanel) {
    this.wizPanel = Preconditions.checkNotNull(wizPanel);
    initComponents();
    final DocumentListener documentListener = new DocumentListener() {

      @Override
      public void insertUpdate(DocumentEvent e) {
        onUpdate();
      }

      @Override
      public void removeUpdate(DocumentEvent e) {
        onUpdate();
      }

      @Override
      public void changedUpdate(DocumentEvent e) {
        onUpdate();
      }
    };
    jTextFieldKey.getDocument().addDocumentListener(documentListener);
    jPasswordField1.getDocument().addDocumentListener(documentListener);
    jPasswordField2.getDocument().addDocumentListener(documentListener);
    jTextFieldValidity.getDocument().addDocumentListener(documentListener);
    final DocumentListener documentListener2 = new DocumentListener() {

      @Override
      public void insertUpdate(DocumentEvent e) {
        onDNameChange();
      }

      @Override
      public void removeUpdate(DocumentEvent e) {
        onDNameChange();
      }

      @Override
      public void changedUpdate(DocumentEvent e) {
        onDNameChange();
      }
    };
    jTextFieldName.getDocument().addDocumentListener(documentListener2);
    jTextFieldUnit.getDocument().addDocumentListener(documentListener2);
    jTextFieldOrg.getDocument().addDocumentListener(documentListener2);
    jTextFieldCity.getDocument().addDocumentListener(documentListener2);
    jTextFieldState.getDocument().addDocumentListener(documentListener2);
    jTextFieldCountry.getDocument().addDocumentListener(documentListener2);
  }

  @Override
  public String getName() {
    return "Key creation";
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabelKey = new javax.swing.JLabel();
    jTextFieldKey = new javax.swing.JTextField();
    jLabelPasswd = new javax.swing.JLabel();
    jPasswordField1 = new javax.swing.JPasswordField();
    jLabelPasswd2 = new javax.swing.JLabel();
    jPasswordField2 = new javax.swing.JPasswordField();
    jLabelValidity = new javax.swing.JLabel();
    jTextFieldValidity = new javax.swing.JTextField();
    jSeparator1 = new javax.swing.JSeparator();
    jLabelName = new javax.swing.JLabel();
    jTextFieldName = new javax.swing.JTextField();
    jLabelUnit = new javax.swing.JLabel();
    jLabelOrg = new javax.swing.JLabel();
    jLabelCity = new javax.swing.JLabel();
    jLabelState = new javax.swing.JLabel();
    jLabelCountry = new javax.swing.JLabel();
    jTextFieldUnit = new javax.swing.JTextField();
    jTextFieldOrg = new javax.swing.JTextField();
    jTextFieldCity = new javax.swing.JTextField();
    jTextFieldState = new javax.swing.JTextField();
    jTextFieldCountry = new javax.swing.JTextField();

    org.openide.awt.Mnemonics.setLocalizedText(jLabelKey, org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jLabelKey.text")); // NOI18N

    jTextFieldKey.setText(org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jTextFieldKey.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabelPasswd, org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jLabelPasswd.text")); // NOI18N

    jPasswordField1.setText(org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jPasswordField1.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabelPasswd2, org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jLabelPasswd2.text")); // NOI18N

    jPasswordField2.setText(org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jPasswordField2.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabelValidity, org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jLabelValidity.text")); // NOI18N

    jTextFieldValidity.setText(org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jTextFieldValidity.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabelName, org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jLabelName.text")); // NOI18N

    jTextFieldName.setText(org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jTextFieldName.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabelUnit, org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jLabelUnit.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabelOrg, org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jLabelOrg.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabelCity, org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jLabelCity.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabelState, org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jLabelState.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabelCountry, org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jLabelCountry.text")); // NOI18N

    jTextFieldUnit.setText(org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jTextField4.text")); // NOI18N

    jTextFieldOrg.setText(org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jTextField4.text")); // NOI18N

    jTextFieldCity.setText(org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jTextField4.text")); // NOI18N

    jTextFieldState.setText(org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jTextField4.text")); // NOI18N

    jTextFieldCountry.setText(org.openide.util.NbBundle.getMessage(ExportPackageCreateKeyVisualPanel.class, "ExportPackageCreateKeyVisualPanel.jTextField4.text")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabelPasswd2)
              .addComponent(jLabelPasswd)
              .addComponent(jLabelKey)
              .addComponent(jLabelValidity))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jTextFieldKey, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
              .addComponent(jPasswordField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
              .addComponent(jPasswordField2, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
              .addComponent(jTextFieldValidity, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabelName)
              .addComponent(jLabelUnit)
              .addComponent(jLabelOrg)
              .addComponent(jLabelCity)
              .addComponent(jLabelState)
              .addComponent(jLabelCountry))
            .addGap(2, 2, 2)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jTextFieldName, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
              .addComponent(jTextFieldCountry, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
              .addComponent(jTextFieldState, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
              .addComponent(jTextFieldCity, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
              .addComponent(jTextFieldOrg, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
              .addComponent(jTextFieldUnit, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE))))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelKey)
          .addComponent(jTextFieldKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelPasswd)
          .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelPasswd2)
          .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelValidity)
          .addComponent(jTextFieldValidity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelName)
          .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelUnit)
          .addComponent(jTextFieldUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelOrg)
          .addComponent(jTextFieldOrg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelCity)
          .addComponent(jTextFieldCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelState)
          .addComponent(jTextFieldState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelCountry)
          .addComponent(jTextFieldCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabelCity;
  private javax.swing.JLabel jLabelCountry;
  private javax.swing.JLabel jLabelKey;
  private javax.swing.JLabel jLabelName;
  private javax.swing.JLabel jLabelOrg;
  private javax.swing.JLabel jLabelPasswd;
  private javax.swing.JLabel jLabelPasswd2;
  private javax.swing.JLabel jLabelState;
  private javax.swing.JLabel jLabelUnit;
  private javax.swing.JLabel jLabelValidity;
  private javax.swing.JPasswordField jPasswordField1;
  private javax.swing.JPasswordField jPasswordField2;
  private javax.swing.JSeparator jSeparator1;
  private javax.swing.JTextField jTextFieldCity;
  private javax.swing.JTextField jTextFieldCountry;
  private javax.swing.JTextField jTextFieldKey;
  private javax.swing.JTextField jTextFieldName;
  private javax.swing.JTextField jTextFieldOrg;
  private javax.swing.JTextField jTextFieldState;
  private javax.swing.JTextField jTextFieldUnit;
  private javax.swing.JTextField jTextFieldValidity;
  // End of variables declaration//GEN-END:variables

  @Override
  void store(WizardDescriptor settings) {
    settings.putProperty(
        AndroidProjectProperties.PROP_KEY_ALIAS, jTextFieldKey.getText());
    settings.putProperty(
        AndroidProjectProperties.PROP_KEY_ALIAS_PASSWD, new String(jPasswordField1.getPassword()));
    try {
      Integer validity = Integer.valueOf(jTextFieldValidity.getText());
      settings.putProperty(ExportPackageWizardIterator.PROP_KEY_ALIAS_VALIDITY, validity);
    } catch (NumberFormatException ex) {
      // can happen when back is used
      LOG.log(Level.FINE, null, ex);
    }
    settings.putProperty(
        ExportPackageWizardIterator.PROP_KEY_ALIAS_DNAME, dName);
  }

  @Override
  void read(WizardDescriptor settings) {
    onUpdate();
  }

  private void onUpdate() {
    wizPanel.onChange();
  }

  @Override
  boolean valid(WizardDescriptor settings) {
    settings.putProperty("WizardPanel_errorMessage", !valid ? errorMsg : null);
    return this.valid;
  }

  @Override
  void validate(WizardDescriptor settings) {
    valid = false;

    if (jTextFieldKey.getText().trim().length() == 0) {
        errorMsg = "Enter key alias.";
        return;

//    } else if (mExistingAliases != null) {
        // TODO check if there is already a key with the same name
//        // we cannot use indexOf, because we need to do a case-insensitive check
//        String keyAlias = mAlias.getText().trim();
//        for (String alias : mExistingAliases) {
//            if (alias.equalsIgnoreCase(keyAlias)) {
//                setErrorMessage("Key alias already exists in keystore.");
//                setPageComplete(false);
//                return;
//            }
//        }
    }

    String value = new String(jPasswordField1.getPassword());
    if (value.length() == 0) {
        errorMsg = "Enter key password.";
        return;
    } else if (value.length() < 6) {
        errorMsg = "Key password is too short - must be at least 6 characters.";
        return;
    }

    if (!value.equals(new String(jPasswordField2.getPassword()))) {
        errorMsg = "Key passwords don't match.";
        return;
    }

    int validity = -1;
    try {
       validity = Integer.valueOf(jTextFieldValidity.getText());
    } catch (NumberFormatException ex) {
      errorMsg = "Key certificate validity is required.";
      return;
    }
    if (validity < 1 || validity > 1000) {
      errorMsg = "Key certificate validity must be between 1 and 1000 years.";
      return;
//    } else if (mValidity < 25) {
//        warningMsg = "A 25 year certificate validity is recommended.";
    }

    if (Strings.isNullOrEmpty(dName)) {
      errorMsg = "At least one Certificate issuer field is required to be non-empty.";
      return;
    }

    valid = true;
  }

  private void onDNameChange() {
    StringBuilder sb = new StringBuilder();

    buildDName("CN", jTextFieldName, sb);
    buildDName("OU", jTextFieldUnit, sb);
    buildDName("O", jTextFieldOrg, sb);
    buildDName("L", jTextFieldCity, sb);
    buildDName("ST", jTextFieldState, sb);
    buildDName("C", jTextFieldCountry, sb);

    dName = sb.toString();
    onUpdate();
  }

  private void buildDName(String prefix, JTextField textField, StringBuilder sb) {
    if (textField != null) {
      String value = textField.getText().trim();
      if (value.length() > 0) {
        if (sb.length() > 0) {
          sb.append(",");
        }

        sb.append(prefix);
        sb.append('=');
        sb.append(value);
      }
    }
  }
}
